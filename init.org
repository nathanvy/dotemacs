#+TITILE: My Emacs configuration
#+AUTHOR: Nathan Van Ymeren
#+STARTUP: showeverything
#+STARTUP: inlineimages
#+PROPERTY: header-args :tangle yes
# the above line causes all code blocks to be tangled unless you give it "tangle no" at the beginning

* About this file
This is a so-called "literate" code file, where the code and its documentation are intertwined as one file and separated at compile/runtime.  I thought my config was pretty extensive until I saw Sacha Chua's, so it turns out I'm actually somewhat of a minimalist.  My philosophy is to make few changes, only when there's a clear value-add.

Caveat:  I primarily use emacs on macOS using the railwaycat fork, so your mileage may vary.

** Infrastructure
First enable lexical binding, then set the package archives.  I use MELPA and until org version 9.5 I used the org-mode specific repository, however it has been deprecated at the time of this writing.  I prefer use-package over el-get or straight.el so that's what I happen to use, but those are perfectly fine alternatives and YMMV.
   
#+BEGIN_SRC emacs-lisp
  ;; -*- lexical-binding: t -*-
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			   ("nongnu" . "https://elpa.nongnu.org/nongnu/")
			   ("gnu" . "https://elpa.gnu.org/packages/")))
  (package-initialize)

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (setq use-package-verbose t)
  (setq use-package-always-ensure t)
  (require 'use-package)
#+END_SRC

I don't often use Customize but I do like to have my Custom options in their own tidy file.  Also load secrets.el if it exists, for configuration that I don't want in source control.
#+BEGIN_SRC emacs-lisp
  (setq custom-file "~/.emacs.d/custom.el")
  (load custom-file)

  (when (file-exists-p (expand-file-name "secrets.el" user-emacs-directory))
    (load-file (expand-file-name "secrets.el" user-emacs-directory)))
#+END_SRC

Dear emacs, stop littering my damn filesystem with ~files everywhere.
#+BEGIN_SRC emacs-lisp
  
  (setq temporary-file-directory "~/.emacs.d/saves")
  (setq backup-directory-alist
	`((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
	`((".*" ,temporary-file-directory t)))

  (message "Deleting old backup files...")
  (let ((week (* 60 60 24 7))
	(current (float-time (current-time))))
    (dolist (file (directory-files temporary-file-directory t))
      (when (and (backup-file-name-p file)
		 (> (- current (float-time (nth 5 (file-attributes file))))
		    week))
	(message "%s" file)
	(delete-file file))))
#+END_SRC

Ensures graphical emacs picks up the same environment variables as the shell.  Copy values of other environment variables by customizing exec-path-from-shell-variables before invoking exec-path-from-shell-initialize, or by calling exec-path-from-shell-copy-env, e.g.: (exec-path-from-shell-copy-env "PYTHONPATH")
#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :if (memq window-system '(mac ns x))
    :config
    (exec-path-from-shell-initialize))
#+END_SRC

I do (insert rimshot here) use ido:
#+BEGIN_SRC emacs-lisp
  (setq ido-enable-flex-matching t)
  (setq ido-everywhere t)
  (ido-mode 1)
#+END_SRC

This next one could be under "visual" as well, since I find the default splash screen to be horrifying.  First a helper function to call cowsay:
#+BEGIN_SRC emacs-lisp
  (defun dashboard-insert-cowsay (list-size)
    (insert (shell-command-to-string "fortune | cowsay")))
#+END_SRC

Then we can stuff it into the dashboard.  In the future I plan to have the cow give me fortune-cookie wisdom when I launch emacs.
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-items '((recents . 10) (bookmarks . 10)))
    (setq dashboard-banner-logo-title "Welcome Hackerman")
    (setq recentf-exclude '("bookmarks"))
    (setq dashboard-startup-banner "~/.emacs.d/dashboard-logo.png"))
#+END_SRC

If you're like me and get anal-retentive about having, say, the "working buffer" on the top, or the left, and your buffer that you're referencing on the right/bottom, then transpose-frame is for you.  Relevant commands are M-x flip-frame for vertical and M-x flop-frame for horizontal flipping.
#+BEGIN_SRC emacs-lisp
  (use-package transpose-frame)
#+END_SRC

Prior to v28, there's a handy setting to convert yes/no prompts to y/n prompts, using fset, however now we can:
#+BEGIN_SRC emacs-lisp
  (setq use-short-answers t)
#+END_SRC

I want a dank-ass parrot helping me out:
#+begin_src emacs-lisp
  (use-package parrot
    :if (display-graphic-p)
    :config
    (parrot-mode))
#+end_src
   
Smart M-x aka smex:
#+BEGIN_SRC emacs-lisp
  (use-package smex)
#+END_SRC

Other settings:
#+BEGIN_SRC emacs-lisp
  ;; for clarity: this is regex; \. and \' are escapes because . and ' have special meaning in regex
  (add-to-list 'auto-mode-alist '("\\.csproj\\'" . nxml-mode))
#+END_SRC



** Visual configuration/Theming
Emacs is actually quite ugly by default so let's address that by removing the hideous toolbar icons.
#+BEGIN_SRC emacs-lisp
  (column-number-mode t)
  (show-paren-mode t)
  (if (display-graphic-p)
      (progn
	(tool-bar-mode -1)
	(scroll-bar-mode -1)))
#+END_SRC

I shopped around for themes quite a lot before settling on the vscode-dark+ theme, which I really liked.  It felt a little dirty to use a vscode theme but it's actually visually quite pleasing, and solarized-dark didn't have enough contrast.  Base16 was good but ultimately I just didn't like it as much as the vscode theme.  However, we synthwave now.
   
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :if (display-graphic-p)
    :config
    (set-face-attribute 'default nil :family "Monaco")
    (set-face-attribute 'fixed-pitch nil :family "Monaco")
    (set-face-attribute 'variable-pitch nil :family "SF Pro Display" :height 140)
    (set-face-attribute 'show-paren-match nil :foreground "#ffffff" :background "#ff2afc")
    (load-theme 'doom-outrun-electric t))

  (use-package all-the-icons
    :if (display-graphic-p))
#+END_SRC

And I hate that emacs beeps at you all the time, so I'd rather it STFU and flash the modeline at me:
#+BEGIN_SRC emacs-lisp
  (use-package mode-line-bell
    :config (mode-line-bell-mode))
#+END_SRC

** Editing
First things first, Language-Server Protocol has deprecated a lot of previously-indispensable infrastructure so let's get that going:

#+begin_src emacs-lisp
  (use-package lsp-mode
    :init
    ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
    (setq lsp-keymap-prefix "C-c l")
    :hook ((go-mode . (lambda ()
			(lsp-go-install-save-hooks)
			(lsp)))
	   (csharp-mode . lsp)
	   (python-mode . (lambda ()
			    (require 'lsp-python-ms)
			    (lsp))))
    :commands lsp lsp-deferred)

  (use-package lsp-ui
    :commands lsp-ui-mode)

  (use-package flycheck
    :init (global-flycheck-mode))

  (use-package lsp-treemacs
    :commands lsp-treemacs-errors-list)

#+end_src
   
I prefer company-mode for completion
#+BEGIN_SRC emacs-lisp
  (use-package company
    :hook (prog-mode . company-mode))
#+END_SRC

Recently I started writing a lot of Go (golang) and there's an awful lot of repetitive error checking when trying to follow the idiomatic style.  I got annoyed at writing the same if construct hundreds of times so I decided it was finally time to install yasnippet.  It comes with ~TAB~ bound to ~yas-expand~ by default which I don't like, so I moved it to a global keymap elsewhere in this file.

#+begin_src emacs-lisp
  (use-package yasnippet
    :init
    (yas-global-mode)
    (define-key yas-minor-mode-map (kbd "<tab>") nil)
    (define-key yas-minor-mode-map (kbd "TAB") nil))

#+end_src

SLY is a fork of SLIME, the Superior Lisp Interaction Mode for Emacs, which has a more modern REPL and is more actively developed.  Works with company mode out of the box.
#+BEGIN_SRC emacs-lisp
  (use-package sly
    :config
    (setq inferior-lisp-program "sbcl"))
#+END_SRC

On a related subject, Paredit rocks for lisp and friends.  It lets you essentially never worry about mismatched delimiters, ever.
#+BEGIN_SRC emacs-lisp
  (use-package paredit
    :mode "paredit-mode"
    :commands enable-paredit-mode
    :init
    (add-hook 'emacs-lisp-mode-hook #'enable-paredit-mode)
    (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
    (add-hook 'ielm-mode-hook #'enable-paredit-mode)
    (add-hook 'lisp-mode-hook #'enable-paredit-mode)
    (add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
    (add-hook 'scheme-mode-hook #'enable-paredit-mode))
#+END_SRC

Prism mode for syntax highlighting:
#+BEGIN_SRC emacs-lisp
  (use-package prism
    :commands prism-mode
    :init
    (add-hook 'lisp-mode-hook #'prism-mode)
    (add-hook 'emacs-lisp-mode-hook #'prism-mode))
#+END_SRC
	  
Markdown-mode provides a major mode for markdown as well as github-flavoured markdown
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
	   ("\\.md\\'" . markdown-mode)
	   ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "multimarkdown"))

  (use-package web-mode)

#+END_SRC

I also contribute to a rather large project written in C#, so I require csharp-mode which isn't built-in.  
#+BEGIN_SRC emacs-lisp
  (use-package csharp-mode
    :init
    (add-hook 'csharp-mode-hook #'rainbow-delimiters-mode))

#+END_SRC

And of course what .emacs is complete without projectile?
#+BEGIN_SRC emacs-lisp
  (use-package projectile)
#+end_src

I recently have begun tinkering with some old Raspberry Pi and Beaglebone single-board computers that I have lying around.  I'd normally prefer to work in Lisp but the library support for e.g. GPIO just isn't there, and Python remains the lingua franca of the Raspberry Pi world.

Therefore:

#+Begin_src emacs-lisp
  (use-package python)

  (use-package lsp-python-ms
    :after (lsp-mode python)
    :init (setq lsp-python-ms-auto-install-server t))

#+end_src

For hacking around with Go (golang) I decided to embrace lsp-mode rather than eglot.  First I'll define this function as recommended in the golang/lsp docs and it gets called somewhere up above in the incantations for LSP mode.
   
#+begin_src emacs-lisp
  (defun lsp-go-install-save-hooks ()
    (add-hook 'before-save-hook #'lsp-format-buffer t t)
    (add-hook 'before-save-hook #'lsp-organize-imports t t))

  (use-package go-mode
    :init (add-hook 'go-mode-hook #'rainbow-delimiters-mode))
#+end_src
   
** Org and LaTeX
The org folks have their own ELPA repository, but since emacs has a built-in org version that is usually older than current, the only way I have found to force install of the org-elpa version is to ensure org-plus-contrib is also installed.
#+BEGIN_SRC emacs-lisp
  (use-package org
    :init
    (setf org-list-allow-alphabetical t)
    (setf org-src-tab-acts-natively t)
    (setf org-startup-truncated nil)
    :config
    (org-babel-do-load-languages 'org-babel-load-languages '((lisp . t) (emacs-lisp . t)))
    (set-face-attribute 'org-table nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-block nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-block-begin-line nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-block-end-line nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-block-begin-line nil :slant 'normal :underline nil :extend nil)
    (set-face-attribute 'org-block-end-line nil :slant 'normal :overline nil :extend nil)
    (setf org-html-preamble nil)
    (setf org-html-postamble nil))

  (use-package org-bullets
    :init
    (add-hook 'org-mode-hook (lambda ()
			       (org-bullets-mode 1))))

  (use-package ox-rfc)
  (use-package gnuplot-mode)
  (use-package ein)
#+END_SRC

For text editing and writing prose, I like to use Olivetti mode which centres the buffer contents, and variable-pitch-mode which makes emacs look a lot more modern.
#+BEGIN_SRC emacs-lisp
  (use-package olivetti
    :init
    (add-hook 'text-mode-hook (lambda ()
				(olivetti-mode 1)
				(olivetti-set-width 140)
				(variable-pitch-mode 1))))
#+END_SRC

I find it's approximately 109812039823 times more convenient to use org-export or pandoc to leverage TeX and friends, but when I do have to write TeX directly I use Auctex for like most people probably do.
#+BEGIN_SRC emacs-lisp
  (use-package tex
    :ensure auctex
    :mode
    ("\\.tex\\'" . LaTeX-mode)
    :init
    (add-hook 'LaTeX-mode-hook (lambda ()
				 (LaTeX-math-mode 1)
				 (TeX-fold-mode 1)
				 (TeX-PDF-mode 1))))
#+END_SRC

** Keybinds

I decided to collect all my custom keybinds into one section here at the end for easy management:
#+begin_src emacs-lisp
  (global-set-key (kbd "M-n") 'company-select-next)
  (global-set-key (kbd "M-p") 'company-select-previous)

  (global-set-key (kbd "C-c d") 'lsp-find-definition)
  (global-set-key (kbd "C-c g") 'rgrep)

  (global-set-key (kbd "C-c i") 'flip-frame)
  (global-set-key (kbd "C-c o") 'flop-frame)
  (global-set-key (kbd "C-c r") 'rotate-frame-clockwise)
  (global-set-key (kbd "C-c t") 'transpose-frame)

  (global-set-key (kbd "C-c y") 'yas-expand)

  (global-set-key (kbd "C-c n") 'parrot-rotate-next-word-at-point)
  (global-set-key (kbd "C-c p") 'parrot-rotate-prev-word-at-point)

  (global-set-key (kbd "C-c q") 'query-replace)
  (global-set-key (kbd "C-c x") 'query-replace-regexp)

  (global-set-key (kbd "M-x") 'smex)
  (global-set-key (kbd "M-X") 'smex-major-mode-commands)
  ;; This is your old M-x.
  (global-set-key (kbd "C-c C-c M-x") 'execute-extended-command)
#+end_src
